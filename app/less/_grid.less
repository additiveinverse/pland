/////////////////
// Semantic.gs // for LESS: http://lesscss.org/
/////////////////

// Defaults which you can freely override
@column-width: 42;
@gutter-width: 20;
@columns: 16;

// Utility variable â€” you should never need to modify this
@gridsystem-width: unit( (@column-width*@columns) + (@gutter-width*@columns), px);

// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;
// @total-width: 100%;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	&:before,
	&:after {
	    content: "";
	    display: table;
	}

	&:after {
	    clear: both;
	}
}


// ////////// GRID //
body {
	width: 100%;
}

.row( @columns: @columns ) {
	width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
	margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
}

.column( @x, @columns: @columns, @margin-top: 'auto') {
	.col( @x, @columns: @columns );
	margin: @margin-top @total-width*((@gutter-width*.5)/@gridsystem-width);
}

// just the width ma'am
.col( @x, @columns: @columns ) {
	@grid-measure: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	width: @grid-measure;
}

.tall( @x, @columns: @columns ) {
	@grid-measure: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	height: @grid-measure;
}

.push( @offset: 1 ) {
	margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}

.pull( @offset: 1 ) {
	margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
