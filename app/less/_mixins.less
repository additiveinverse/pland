@import 'lesshat';
@import '_variables';

.font-size( @font-size: @base-type-size, @offset: 1 ) {
	@rem: ( @font-size / 10 );
	font-size: ~"@{rem}rem";
	font-size: unit( @font-size, px );
	line-height: @base-line-multiplier / @font-size * @offset;
}

._inject( @content: "" ) {
	content: @content;
}

.inline-block( @valign: top ) {
	display: inline-block;
	vertical-align: @valign;
}

//////////////////////////// Helper Class
// icons
.icon_base {
	position: relative;
	font-family: @font-icon;
	font-style: normal;
	font-weight: normal;
	padding: 0 @base-margin-eighth;
	speak: none;
	color: @base-icon-color;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	font-smoothing: antialiased;
	.inline-block(middle);
	line-height: 1;
}

.ico {
	&:extend( .icon_base );
}

//////////////////////////// Let's go ahead and set the base icon styles
._ico( @_ico, @font-size ) {
	._inject( @_ico );
	.font-size( @font-size, @base-line-height );
}

//////////////////////////// Let's make some icons
// 	Here's where the magic happens
.icon( @place, @_ico, @fs: @base-icon-size ) when ( @place = "pre" ) {
	&:before {
		&:extend(.icon_base);
		margin-right: @base-margin-eighth;
		._ico( @_ico, @fs );
	}
}

.icon( @place, @_ico, @fs: @base-icon-size ) when ( @place = "app" ) {
	&:after {
		&:extend(.icon_base);
		margin-left: @base-margin-eighth;
		._ico( @_ico, @fs );
	}
}

// @note: these all do nothing but switch the direction.
// @note: offset is based on border @width sent by .arrow()
.arrow_pointing( up, @-color, @offset ) {
	margin-bottom: @offset / 2;
	border-color: transparent transparent @-color transparent;
}

.arrow_pointing( down, @-color, @offset ) {
	margin-top: @offset / 2;
	border-color: @-color transparent transparent transparent;
}

.arrow_pointing( left, @-color, @offset ) {
	margin-right: @offset / 2;
	border-color: transparent transparent transparent @-color;
}

.arrow_pointing( right, @-color, @offset ) {
	margin-left: @offset / 2;
	border-color: transparent @-color transparent transparent;
}

.arrow( @_, @-color: @border-color, @width: 5px ) {
	&:after {
		position: relative;
		border: @width solid;
		._inject();
		.arrow_pointing( @_, @-color, @width );
	}
}

// Border helpers
.border ( @width: 1px, @style: solid, @color ) {
	border: @arguments;
}

.bt ( @width: 1px, @style: solid, @color: @border-color ) {
	border-top: @arguments
}

.br ( @width: 1px, @style: solid, @color: @border-color ) {
	border-right: @arguments
}

.bb ( @width: 1px, @style: solid, @color: @border-color ) {
	border-bottom: @arguments
}

.bl ( @width: 1px, @style: solid, @color: @border-color ) {
	border-left: @arguments
}
// Yes. (sigh). I lifted this from bootstrap
// oh the feels
#gradient {
	// Horizontal gradient, from left to right
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
	.horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
		background-image: -webkit-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Safari 5.1-6, Chrome 10+
		background-image: -o-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Opera 12
		background-image: linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
	}

	// Vertical gradient, from top to bottom
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
	.vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
		background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+
		background-image: -o-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Opera 12
		background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
	}

	.directional(@start-color: #555; @end-color: #333; @deg: 45deg) {
		background-repeat: repeat-x;
		background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+
		background-image: -o-linear-gradient(@deg, @start-color, @end-color); // Opera 12
		background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
	}
}

.size(@square) {
  @unit: 'px';
  .process(@square) when (ispixel(@square)), (isem(@square)), (ispercentage(@square)), (iskeyword(@square)) {
    width: @square;
    height: @square;
  }

  .process(@square) when not (ispixel(@square)) and not (isem(@square)) and not (ispercentage(@square)) and not (isstring(@square)) and not (iskeyword(@square)) {
    width: ~`@{square} + @{unit}`;
    height: ~`@{square} + @{unit}`;
  }

  .process(@square);
}